var helptext={};
helptext['About Me'] = "Developer\r\n\tAhmet Timur Selcuk Dundar\r\n\t\tI am Ahmet and from Turkey, Istanbul. I get too much from open source community and want to give some of my work back to community to make it fair trade. I worked 9 years for Turkey's biggest bank (Turkey Isbank) as a software developer. And working as a freelancer 2 years at time i am writing this. \r\n\t\t:I love javascript. I love creating new framework(s) and see them in action. So please share your exprience with my h5Engine even its a bad one. @mailto:atsd34@gmail.com@ \r\n\t\tI want to continue to work on h5Game Engine as long as there is time for it. So dont hesitate to ask for new features bug reports on my GITHUB it really helps. And if you want to contribute contact me. Also you can always donate me money so i can keep working on this and spare more time for h5Engine. \r\n\t\tNOTE : I created this h5engine for myself to use for my needs. And used in some games. Then wanted to share my work with others. But still this is very early version so dont let missing features and bugs (If there any) discourage you. You may easily fix it or contact me.\r\n\t\tIf you want to donate bitcoins here is my address, please note feature request with donations are welcomed.\r\n\t\tBitcoin Address : 18xK55MmDt4warAYXzBFndmNLhWM73HuFa"
helptext['Assets'] = "Assets Window\r\n\t\tAssets are simply project files and their folder structure. You can double click on assets to execute their special function. These Are;\r\n\t\t- Folder : Expand-Collapse\r\n\t\t- Prefab : Add to current scene\r\n\t\t- Scene : Open Scene\r\n\t\t- Javascript / Js file : Quick edit Javascript editor.\r\n\t\t- Animation : Open paper animation window\r\n\t\t- Images : ONLY WHEN Paper animation window is opened ; it will add image as last item (More info on animation editor.)\r\n\t\tThis Window contains following features.\r\n\t\t- Filter by Type : You can select most used types among all asset types for better workflow esspecially when you have too many unorganized assets. \r\n\t\t- Rename : If you select an asset then press f2 you can rename any asset (Dont change extension if you dont intend to)\r\n\t\t- Create empty folder : Create new empty folder in asset folder hierarchy\r\n\t\t- Open File : To add assets from your computer; Click Open file button select file(s) then \"Open\"\r\n\t\t- New Animation : Creates new empty animation file.\r\n\t\t- Prefab Painter : Opens Prefab painter window for easier level editing.\r\n\t\t- New Script Object : Creates new script object with default functionality to create new component.\r\n"
helptext['Camera'] = "Camera\r\n\tGame Camera\r\n\t\tEvery object in h5Engine is stored in \"objects\" object there is one exception for this ; Camera. You can access camera with \"camera\" object. Camera controls where gameview look at all objects are drawn relative to camera.\r\n\t\tYou cannot set camera from gameview camera related actions must be done in simple coding.\r\n\tCoding\r\n\t\t\"camera\" object have following properties.\r\n\t\tx,y : This is where camera's lookAt position. Any object that is at the same position as camera x-y will be centered.\r\n\t\tfunction camera.follow(go,percent) : With this easy function you can make a camera to stick to a gameobject, that gameobject always will be locked to center. With second parameter you can add easing effect. At 100 camera will follow immediately at 5 (for example) camera always tries to catch up to gameobject.\r\n\t\tcamera.followX , camera.followY : with this boolean variables you can toggle following X or following Y positions. When camera.followX ==false and camera.followY ==true , then camera will follow Y position but not X position , X position must be set manually.\r\n\t\t//Example \r\n\t\tcamera.x= 200; // now camera's center position is set to x=200 - for easy reference think an object with x position =200 that object will be centered.\r\n\t\tcamera.follow(objects.GameObject0,20); // now camera's x and y values will be calculated automatically to follow GameObject0.\r\n\t\tcamera.followY=false; // Dont follow GameObject0's y value.\r\n\t\tcamera.y=-100; // now camera's center position's y value is set to static -100. camera's x position will always follow GameObject0 whereas camera y position will always be -100;\r\n\r\n"
helptext['Constraints'] = "Constraints\r\n\tRevolute Constraint\r\n\t\tRevolute constraint is how you attach two physics object. If you add revolute constraint to one physics object and set another object as \"otherGameObjectName\" they will attached and will have fix distance.\r\n\t\tFor example if you make 2nd object static and 1st as not-static it can rotate around it.\r\n\t\t@@physics.gif@@\r\n\t\totherGameObjectName : The object that has revolute constraint will bind to an object that is name is set here. If left empty, world is considered as 2nd object and Anchor is calculated as world position.\r\n\t\tAnchorX ,AnchorY : Anchor point for first object is always center of gameobject but you can set anchor point relative to 2nd gameobject.\r\n\t"
helptext['Custom Editor for properties'] = "Custom Editor(Advanced)\r\n\t\tSometimes default behaviors of property inputs are not enough, you need more customization. In that case you can create your own property editors by adding HTML and little code.\r\n\t\tUsage: this.customDiv={\"Name to define div group\" : function(container_Div_That_Will_Hold_Other_Controls){ //Initialization and functions} ,\"you can define More div\":function(secondContainer){//More code} }\r\n\t\t//Example 1\r\n\t\t\tgm.TestComponent3=function(){\r\n\t\t\tthis.Attribute1=0;\r\n\t\t\tvar $this = this;\r\n\t\t\tthis.private={Attribute1:true};\r\n\t\t\tthis.customDiv={\r\n\t\t\t\tSliders:function(container){\r\n\t\t\t\t\t$(\"&lt;span&gt; Attribute1 slider is below&lt;/span&gt;\").appendTo(container);\r\n\t\t\t\t\tvar sliderdiv= $(\"&lt;div style='margin:10px 10px 10px 10px'/&gt;\").appendTo(container);\r\n\t\t\t\t\t\t$(sliderdiv).slider({\r\n\t\t\t\t\t\t\tcreate: function () {\r\n\t\t\t\t\t\t\t\t$('.ui-slider-handle').text($(this).slider(\"value\"));\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tslide: function (event, ui) {\r\n\t\t\t\t\t\t\t\t$('.ui-slider-handle').text(ui.value);\r\n\t\t\t\t\t\t\t\t$this.Attribute1=ui.value;\r\n\t\t\t\t\t\t\t\tCommitValue($this.gameObject, \"TestComponent3\",\"Attribute1\"); //You need to commit value to server when you make changes for editor or else it will not be saved\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue:$this.Attribute1,\r\n\t\t\t\t\t\t\tmin:0,\r\n\t\t\t\t\t\t\tmax:10\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}            \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\tResult :\r\n\t\t@@testcomponent3.png@@\r\n\t\t//Example 2\r\n\t\t\tgm.TestComponent4 = function() {\r\n\t\t\t\tthis.Attribute1 = 0; //Value is not hidden you can see value as you increase or decrease\r\n\t\t\t\tvar $this = this;\r\n\t\t\t\tthis.customDiv = {\r\n\t\t\t\t\tButtons: function(container) {\r\n\t\t\t\t\t\taddMenu(\"Increase Attribute1\", function() {\r\n\t\t\t\t\t\t\t$this.Attribute1++;\r\n\t\t\t\t\t\t\tCommitValue($this.gameObject, \"TestComponent4\", \"Attribute1\");\r\n\t\t\t\t\t\t\tif (selectedSprite == $this.gameObject)\r\n\t\t\t\t\t\t\t\treDrawPanel($this.gameObject);\r\n\t\t\t\t\t\t}, \"\", container, \"\");\r\n\t\t\t\t\t\taddMenu(\"Decrease Attribute1\", function() {\r\n\t\t\t\t\t\t\t$this.Attribute1--;\r\n\t\t\t\t\t\t\tCommitValue($this.gameObject, \"TestComponent4\", \"Attribute1\");\r\n\t\t\t\t\t\t\tif (selectedSprite == $this.gameObject)\r\n\t\t\t\t\t\t\t\treDrawPanel($this.gameObject);\r\n\t\t\t\t\t\t}, \"\", container, \"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\tResult :\r\n\t\t@@testcomponent4.png@@"
helptext['Events'] = "Events\r\n\tComponent Predefined Events\r\n\t\tA Component code block defines how that component behave on certain events like when component created on screen, or in gameloop etc. There is some predefined events can be used to make reactive component. Also you can define your own events.\r\n\t\tPredefined Events\r\n\t\tEvents can be defined for a component with this syntax: gm.[COMPONENT NAME].[EVENT NAME] = function ([Arguments if any]){ [Code to do when event occur]  }\r\n\t\t// Example for TestComponent defining create event;\r\n\t\tgm.TestComponent = function() { [Default values] }  //Defining component\r\n\t\tgm.TestComponent.prototype.create = function() { console.log(\"Test component initialized for \"+ this.gameObject.name.value+\" gameobject\"); }\r\n\t\t\tcreate : Event occurs when component created. And after all other gameobjects in default scene defined. IMPORTANT NOTE : Especially code that require another gameobject should never be in component's define section. All of the initialization logic should be in create event rather than define part.\r\n\t\t\tupdate : This event acts as game loop , it is executed on every frame.\r\n\t\t\tdispose : When game object is destroyed every component is destroyed too. Before destroying game object dispose event executed. If you had link to any global variable in component design you have to unlink on dispose event. For example when you create physics object with 3rd party plugin you need to dispose 3rd party physics object in dispose event to prevent inconsistencies.\r\n\t\t\tafterCreate : If you need some code block that needs to be executed after \"all gameobjects queued to create\" created you can use afterCreate event. This is especially important during scene initialization where batch of gameobjects created without any control when you design component.\r\n\t\t\tclickMe,mouseDownOnMe,mouseUpOnMe,mouseMoveOnMe  : Mouse Click/ Touch to game object (click also means touch, mouseDown also means touchstart,mouseUp also means touchended,mouseMove also means touchmove ). Gameobject's size , position and parent considered to calculate bounding box. \r\n\t\t\tclick,mouseDown,mouseUp,mouseMove : Mouse Click/ Touch on anywhere (click also means touch, mouseDown also means touchstart,mouseUp also means touchended,mouseMove also means touchmove ). This events ignore current gameObjects position.\r\n\t\t//Example \r\n\t\t\tgm.TestComponent.prototype.mouseMove = function (mouse, event) {\r\n\t\t\t\t/*\r\n\t\t\t\tmouse object has this properties : \r\n\t\t\t\tleft (bool) : is left button\r\n\t\t\t\tright : is right button\r\n\t\t\t\tmiddle : is middle button\r\n\t\t\t\tx: mouse position x relative to game world \r\n\t\t\t\ty: mouse position y relative to game world \r\n\t\t\t\tscreenX : mouse position x relative to screen top (as you go to bottom it increases)\r\n\t\t\t\tscreenY : mouse position y relative to screen left (as you go to right it increases)\t\t\r\n\t\t\t\tevent object is original event created by canvas\r\n\t\t\t\t*/\r\n\t\t\t}\r\n\t\t\tbeginContact,endContact,impact : this events only available if you are using p2.js or box2d physics engine and gameobject have physics body. They executed during physics contact start ,end or any impact.\r\n\r\n\tDefining your own event.(Advanced)\r\n\t\t\tCreateNewComponentEvent function can be used to define new event types to component design. You have to add new event during global execution. (Not in any component design or initialization). Also creating event multiple time may result in multiple execution.\r\n\t\t\tFireEventWithArguments(EventName,ArgumentsArray) function can be used to manually fire all defined events.\r\n\r\n\t\t//Example\r\n\t\t\t//First Line of javascript file.\r\n\t\t\tCreateNewComponentEvent(\"TestEventEverySecond\"); // You also create TestEventEverySecondFunctions array \r\n\t\t\t//You need to fire event manually during your custom logic, for easy example we used setInterval.\r\n\t\t\tsetInterval(function(){\r\n\t\t\t\tFireEventWithArguments(\"TestEventEverySecond\",[new Date()]); // You can inspect box2dHelpers.js for more complex example.\r\n\t\t\t},1000);\r\n\t\t\tgm.TestComponent = function () {\r\n\t\t\t}\r\n\t\t\tgm.TestComponent.prototype.TestEventEverySecond= function (dt) {\r\n\t\t\t\tconsole.log(dt); // This will be fired every second with dt parameter , which is set to current date in event\r\n\t\t\t}"
helptext['FAQ'] = "Coming Soon"
helptext['Game Object'] = "GameObjects\r\n\t\tIn h5Engine environment everything represented by a gameobject. And all objects stored in \"objects\" glabal javascript object which in total makes your scene/level. GameObject is a shell for sum of components with set of values. Every behaviour for gameobject is defined in components.\r\n\tComponent\r\n\t\tComponents are generally predefined behaviour patterns that are attached to gameobjects. Components can have their event behaviours custom behaviours or can only shell for variables. There is some components defined by h5Engine which are essential for game to work -like position and name component- that every gameobject has. Also you can define your own components.\r\n\t\tYou can define new component in global variable \"gm\" . By default components are actually an object designed with \"prototype design pattern\".\r\n\t\tSee all events that game object can have at @Events@\r\n\t\t//Example\r\n\t\tgm.NewComponent = function(){\r\n\t\t\tthis.var1=0; //Predefined value which can be changed in inspector.\r\n\t\t\tthis.var2=\"trtr\";\t\t\r\n\t\t}\r\n\t\tgm.NewComponent.create=function(){ //When gameobject created all of the components are created aswell, then their create function triggers if it exists.\r\n\t\t\tthis.var1=5;\r\n\t\t}\r\n\r\n\tPredefined functions for gameobjects \r\n\t\tWhen you create a gameobject h5Engine automatically add 4 function for ease of access.\r\n\t\t[GameObject].remove() : Removes this gameobject and its children from scene.\r\n\t\t[GameObject].addComponent(\"name of component\",{defaultvalues}) : You can add components from editor but sometimes you need to add component from code, in this case you can use this function.First parameter is name of the component, and second one is default values that need to be set befor initialization.\r\n\t\t//Example (Assumes you have testGO gameobject in scene with name and position component only)\r\n\t\tobjects.testGO.addComponent(\"text\",{text:\"Hello World!\",fontSize:24}); // This will add text component with initial values.\r\n\t\t[GameObject].removeComponent(\"name of component\") : This will remove component from gameobject. Dont try to remove position and name components even if you dont need because they are essentials.\r\n\t\t//Example (Assumes you have testGO gameobject in scene with name,text and position component only)\r\n\t\tobjects.testGO.removeComponent(\"text\");\r\n\t\t[GameObject].children() : Returns all children of gameobject defined in gameobject hierarchy.\r\n\r\n\tPosition component\r\n\t\tThe position component is the core of an gameobject stores important information and does most important jobs at background. Most important things that position component is accountable for; actual position in world, rotation, scale , parent-child relationship, isGUI element or not, draw order and game design view represantation.\r\n\t\tPosition,rotation,center : Every game object is placed on world and if there is drawing is involved, it is drawed at position that determined components x and y values. Also when drawing occurs center is calculated using centerx and centery values. this values is between 0-1 where 0 is left for centerx top for centery, 1 is right and bottom. Center is shown with little yellow x in game design view.\r\n\t\trotation is degree (between 0-360) which gameobject is rotated around its center point. \r\n\t\t//Example (Assumes you have testGO gameobject)\r\n\t\tobjects.testGO.position.x=200; // Set x 200 unit right to center of view;\r\n\t\tobjects.testGO.position.y -=100; // Set y 100 unit upwards\r\n\t\tobjects.testGO.position.rotation=135; //Rotate 135 degree\r\n\t\tScale: Gameobjects scale is controlled by 4 property ; width,height,scaleX,scaleY. width and height property determines gameobjects size in units. But sometimes you need proportional scale in that case you can use scaleX and scaleY (defaults are 1)\r\n\t\t//Example (Assumes you have testGO gameobject)\r\n\t\t{\r\n\t\tobjects.testGO.addComponent(\"text\",{text:\"Hello World!\"}); // Add text\r\n\t\tobjects.testGO.text.fontSize=24; //Setting fontSize automatically calculates width and height. (Width : 149, Height:36)\r\n\t\tobjects.testGO.position.width = 75; // Stretches text to fit 75 unit horizantally.\r\n\t\tobjects.testGO.position.height = 18; // Stretches text to fit 18 unit vertically.\r\n\t\tobjects.testGO.text.fontSize=30; //Setting fontSize automatically calculates width and height. (Width : 185, Height:41)\r\n\t\tobjects.testGO.position.scaleX = 0.5; // Stretches text to fit 92.5 unit horizantally.\r\n\t\tobjects.testGO.position.scaleY = 0.5; // Stretches text to fit 20.5 unit vertically.\r\n\t\tobjects.testGO.text.fontSize=24; //Setting fontSize automatically calculates width and height. (Width : 149, Height:36 ,but actual Width :74.5,Actual Height :18)\r\n\t\t}\r\n\t\tDraw Order: zOrder property is used to calculate drawQueue. smallest zOrder drawn first and others drawn onto it. Highest zOrder always shown entirely (if it is in current camera view)\r\n\t\tParent : By default gameobjects are parentless, but if you define parent for a gameobject parent's position component will influence child position. (Position x-y values, rotation and scale will have effect on children) Also parent-child relation is represented in game hierarchy window.\r\n\t\tIsGUI: If you mark an object as gui you can align gameobject to visible scene easier. And camera movements wont have any effect on gameobjects relative position on screen.\r\n\t\tGame Design representation: When a game object is drawn on game design view its position component decides/ calculates actual place on screen with all information on position component has. \r\n"
helptext['Game View'] = "Game View Window\r\n\t\tGame View Window is where your games initial state is shown AKA its a Level editor. \r\n\t\tTop of the view there is 4 button; to decide what mouse actions do; \r\n\t\tWork : is default behaviour which you can select/move game objects with left click or left drag . \r\n\t\tPan : is behaviour that you can pan scene with left mouse drag.\r\n\t\tZoom : is behaviour that you can zoom in/out scene with left mouse drag.\r\n\t\tReset : when you click this button scene will be resetted to default zoom and default pan (1 zoom x:0 y:0 drag)\r\n\t\tNOTE : Mouse Wheel always zooms in and out (Mouse's current position is set as origin)\r\n\t\tAlso There is 3 text boxes for more accurate zoom-pan first textbox determines zoom level , second one is x pan last one is y pan.\r\n\t\t@@gameview.png@@\r\n\t\tGame view window lets you design your scenes/levels in a visual way. you can Move gameobjects select then change attributes from properties window. all of the actions done here can be undoable or redoable. (CTRL-Z , CTRL-Y)\r\n\t\tTo delete gameobject , select it from gameview or hierarchy window then press Delete key.\r\n\t"
helptext['Getting Started'] = "Installing\r\n\tInstall Through Source Code (Recommmended)\r\n\t\tPrerequisites\r\n\t\t\t:Visual studio (Minimum 2017 Recommended) , Download free; @https://visualstudio.microsoft.com/tr/downloads/@\r\n\t\t\t:Visual studio Node.js tools. (During installation of Visual Studio select \"Node.js Development\" under Web&Cloud, if visual studio exists you can add this through Tools-> Get Tools and Features)\r\n\t\tTo Install h5Engine visit h5Engine site downloads section. And download latest source code. Open with visual studio Build and Run. Continue to work in Chrome\r\n\tInstall Through Executable\r\n\t\tTo Install h5Engine visit h5Engine site downloads section. And download latest executable. Install with easy installer. Then run program\r\nFirst Project\r\n\tCreate\r\n\t\tTo Create your first project open h5Engine and Select File -> New Project. Enter full path of new project's desired folder on your computer. This is where all files of your project will be saved. Then select all needed pre-installed plugins according to your project needs. If you are unsure you can add any plugin whenever you need so add essentials.\r\n\t\tThen Press \"Change\" button to change current project.\r\n\t\tNew Project Popup:\r\n\t\t@@newproject.png@@\r\n\tSettings\r\n\t\tYou can change project settings through top menu \"Settings\" Button.\r\n\t\tPixel Perfect : If you enable this option images will be rendered with \"Nearest\" option, if you disable this option images will be rendered bilinear\r\n\t\tAutoWidth-Width: If you enable Autowidth width will be auto calculated within current environment. If you disable, Width value will be used to create canvas with static width.\r\n\t\tAutoHeight-Height: If you enable AutoHeight height will be auto calculated within current environment. If you disable, Height value will be used to create canvas with static height.\r\n\t\tHeader: This will be title of exported html file.\r\n\t\tBackgroundColor: Default background color for project will be used in exported game as background when there is nothing else front.\r\n\t\tMinWidthHeightRatio -MaxWidthHeightRatio : When project uses Auto Width and height you can limit Width/Height ratio between this values (To prevent show undesirable parts or to get better consistency)\r\n\t\tSettings Window:\r\n\t\t@@settings.png@@\r\n\tRun Game\r\n\t\tThere is 3 different way to run your game. \r\n\t\t- File -> Export Project(Test First Scene)  , Shortcut ; F6 Key : When this option used your game will run with the first scene which is set in Scene order (File -> Scene Order). To run this option you have to have at least 1 scene and set scene order (See @Scene Management@ for more details). Note; if you are working on the first scene and it is not saved, it will run last saved version.\r\n\t\t- File -> Export Project(Test Current Scene)  , Shortcut ; F7 Key : When this option used your game will run with the current scene you are working even its is not saved. (It will ignore last save of current scene)\r\n\t\t- Visual studio : If you open project with visual studio and debug through it it will always open current scene with current state. (It will automatically sync with editor)\r\n"
helptext['GUI'] = "GUI (User Interfaces)\r\n\tMake sprite as GUI\r\n\t\tEvery sprite can be a gui aswell. A gameobject can be made GUI manually by setting its zOrder too high (So it can stay on top of things) and a component to set its position with current camera.\r\n\t\tThere is an easier way to do this; If you check isGuiElement in position's properties. That element is marked as GUI and it is drawn by different static camera on top of normal game camera. This will show new properties in position component.\r\n\t\t@@GUI1.png@@\r\n\t\tisGuiElement : Mark element as GUI GUI elements always on top of other gameobjects they have their own zOrder list.\r\n\t\trightAligned : GUI's by default is aligned to left side of the game ,if you check this option it will align gameobject's center to mostright position.\r\n\t\tcenterAligned: Align gameobject's center to middle of left and right side."
helptext['Hierarchy'] = "Hierarchy Window\r\n\t\tThis window contains 3 simple feature\r\n\t\t- New Game Object : Creates New Empty Game Object with 3 component name,position and sprite. Name and Position are essentials so you cannot remove these components without spoiling engine. And sprite is most used component.\r\n\t\t- Hierarchy view/change : All your game objects in current state lists in hierarchy tree. You can move any game object to change its parent- or break parent. NOTE : You can filter game objects by entering text on filter area, It will also show filtered Gameobject's children /and parent\r\n\t\t- Selecting Game object : To select any game object simply click on it. When you select game object then you can rename by pressing F2 (It  will simply focus name area on properties). Or you can press DEL to delete any gameobject and its children.\r\n"
helptext['Index.txt'] = "Getting Started\r\nVisual Studio Integration\r\nWork Area\r\n\t- Work Area\r\n\t- Hierarchy\r\n\t- Assets\r\n\t- Properties\r\n\t- Game View\r\n\t- Other Windows\r\n\t\t- Script Editor\r\n\t\t- Prefab Painter\r\n\t\t- Paper Animation Editor\r\n\t\t- Object Animation\r\n\t- Menu\r\nCore Concepts\t\r\n\t- Game Object\r\n\t- Events\r\n\t- Scene Management\r\n\t- Plugin Management\r\n\t- Prefabs\r\nExtending Editor\r\n\t- Custom Editor for properties\r\n\t- New Editor Window\r\n\t- New Menu\r\n\t- Painter (overriding default actions)\r\nSprite Components\r\n\t- Standart Sprite\r\n\t- GUI\r\n\t- Text\r\n\t- Sprite Animation\r\n\t- Tiled (Will be fixed)\r\n\t- Random Tiled (Programatic Background creation)\r\n\t- Paperbook animation\r\n\t- Particles\r\nCamera\r\nPhysics \r\n\t- Physics\r\n\t- Physics Object\r\n\t- Constraints\r\n\t- Liquid\r\nSound\r\nObject Animation\r\nTutorials\r\nFAQ\r\nAbout Me"
helptext['Liquid'] = "Liquid simulation\r\n\tCreate liquid\r\n\t\tGoogle Liquidfun is integrated to h5Engine if you need liquid simulation. You can create liquids without touching code in notime.\r\n\t\tTo create\r\n\t\t1- Create new gameObject\r\n\t\t2- Add Physics component, remove sprite component.\r\n\t\t3- In Physics Component Check isLiquid\r\n\t\t4- Create starting shape of liquid (as box ,circle or polygon)\r\n\t\t5- Select particleImage (If you dont have any just start with \"_standartAssets\\general\\DefaultParticlePixel.png\")\r\n\t\t6- Set other properties (explained below.)\r\n\t\tmaxParticleInOneFrame : Liquid particle amount is calculated automatically if you have too small liquid particle in big shape then there will be performance impact, you can limit here. But generally you want too big amount so there wont be any loss.\r\n\t\tparticleRadius : Every particle is essentially a circle, this will set its radius.\r\n\t\tparticleType : This will set object behaviour you can make it act like water ,sticky jar, elastic (like jelly) or even can make it solid wall.\r\n\t\tparticleImage : Every particle and its shadows will be rendered with this image.\r\n\t\tparticleImageShadow : amount of shadow to add particles this makes every particle look like droplet instead of just circle. If you want circle anyway you can set this to 0.\r\n\t\tparticleImageWidth : particleRadius sets particle size in physics world this one sets its width in visual world which is rendered. \r\n\t\tResult: \r\n\t\t@@liquid.png@@\r\n\t\t@@liquid.gif@@"
helptext['Menu'] = "Top Menu\r\n\t\tTop menu contains commands needed for game engine.\r\n\tFile\r\n\t\t- Open With Visual Studio : Opens current game code with visual studio. If you disable connectedVisualStudio from settings some inconsistencies may occur. So make sure it is enabled.\r\n\t\t- Open Project : To open existing project (change current project) click this, then enter local path of solution.\r\n\t\t- New Project : To create new project click menu item then in popup window; Enter full path of new projects desired folder on your computer. This is where all files of your project will be saved. Then select all needed pre-installed plugins according to your project needs. If you are unsure you can add any plugin whenever you need so add essentials.\r\n\t\t- Export Project(Test First Scene)  , Shortcut : F6 Key : When this option used your game will run with the first scene which is set in Scene order (File -> Scene Order). To run this option you have to have at least 1 scene and set scene order. And if you are working on the first scene and it is not saved, it will run last saved version.\r\n\t\t- Export Project(Test Current Scene)  , Shortcut : F7 Key : When this option used your game will run with the current scene you are working even its is not saved. (It will ignore last save of current scene)\r\n\t\t- Scene Order : This will open new popup window where you can arrange scene order. you can drag items to set its order or you can drag scenes between Scene Order and Unused Scene. \r\n\t\tNOTE: When you create new scene it will be on unused scenes so you need to put in order manually.\r\n\t\t- Import Plugin : Import/ReImport existing plugin to current project click menu item then select plugins from popup then click import (More information on Plugin Management)\r\n\t\t- Save Plugin : To Create new plugin or change existing plugin you can use this menu item (More information on Plugin Management)\r\n\t\t- Recent List : At the end of File menu there will be last used 10 projects for easier project changing. Click one of them to directly open project.\r\n\tOthers\r\n\t\tBack Arrow- Undo : Undo last change (Undoes persist throug sessions)\r\n\t\tFW Arrow-Redo : Redo last undo (Redoes persist throug sessions)\r\n\t\tHide/Show GUI Toggle: Hides or shows GUI elements in current scene's gameview.\r\n\t\tHierarchy, Scene ,Properties, Assets : If you close one of the essential window you can show that window by clicking its menu item.\r\n\tSettings\r\n\t\tYou can change project settings through top menu \"Settings\" Button. Popup contains below attributes\t\r\n\t\tPixel Perfect : If you enable this option images will be rendered with \"Nearest\" option, if you disable this option images will be rendered bilinear\r\n\t\tAutoWidth-Width: If you enable Autowidth width will be auto calculated within current environment. If you disable, Width value will be used to create canvas with static width.\r\n\t\tAutoHeight-Height: If you enable AutoHeight height will be auto calculated within current environment. If you disable, Height value will be used to create canvas with static height.\r\n\t\tHeader: This will be title of exported html file.\r\n\t\tBackgroundColor: Default background color for project will be used in exported game as background when there is nothing else front.\r\n\t\tMinWidthHeightRatio -MaxWidthHeightRatio : When project uses Auto Width and height you can limit Width/Height ratio between this values (To prevent show undesirable parts or to get better consistency)"
helptext['New Editor Window'] = "New Editor Window (Advanced)\r\n\tCreating new Editor\r\n\t\tWhen custom editor for properties is not enough or you need generic editor windows for new purposes or to automatate your workflow, you can create new editor window that can do anything javascript and h5Engine can (I mean anything)\r\n\t\tPrenote: h5Engine uses GoldenLayout for its window system. Thanks for great framework. For more advanced operations you can always check @https://golden-layout.com/@ GoldenLayout site for its capabilities and further needs.\r\n\t\th5Engine provides 4 functions for most frequently used functions. (But you can use goldenlayout native functions to extend these)\r\n\t\tfunction CreateNewWindow(Title, elementName) : This Function is used to create new Window and returns jquery element where you can put your controls. If window already exists it will just return jquery element.\r\n\t\tfunction activateByTitle(Title) : If Window is set as a tab element (probably by user) this function activates and focuses tab.\r\n\t\tfunction FindTabByTitle(Title) : This function will return goldenlayout element (Tab Element) of window for further customization.\r\n\t\tfunction FindStackByTitle(Title) :This function will return goldenlayout element (Stack Element) of window for further customization.\r\n\tExample;\r\n\t\tResult:\r\n\t\t@@newwindow.png@@\r\n\t\t//Example Assumes we have a game object named \"GameObject0\" \r\n\t\t// Not a usefull window(but simple and educative) that changes GameObject0's position x value and changes to gameobject is shown on window. Also used advanced techniques to prompt confirmation during closing window\r\n\t\tfunction CreateTestWindow() {\r\n\t\t\tvar $el = CreateNewWindow(\"Test Window\", \"dvTestWndw\"); // Creates new window if is not present \r\n\t\t\t// if we used CreateNewWindow(\"Test Window\"); it would create element with name \"TestWindow\"; \r\n\t\t\t$el[0].style = \"padding:10px 10px 10px 10px;color:white\"; //You can use DOM operations or jquery operations on element \r\n\t\t\t$el.append(\"<span>GameObject0 x position ?</span>\");\r\n\t\t\tvar input = $(\"<input type='number' style='color:black'/>\").appendTo($el); //creates new textbox inside our window; \r\n\t\t\tinput.val(objects.GameObject0.position.x); // Puts gameobject's position.x value to textbox \r\n\t\t\tinput.on(\"change\", function () { //changes to textbox \r\n\t\t\t\tvar x = parseFloat(input.val());\r\n\t\t\t\tif (!isNaN(x)) { //if its a number set otherwise we dont want to break things\t\t\t\t\r\n\t\t\t\t\tobjects.GameObject0.position.x = x;\r\n\t\t\t\t\tCommitValue(objects.GameObject0, \"position\", \"x\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinput.val(objects.GameObject0.position.x);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tnewObservable(objects.GameObject0.position, \"x\", undefined, function () { //Changes to actual gameobject value \r\n\t\t\t\tvar currentX = parseFloat(input.val());\r\n\t\t\t\tif (objects.GameObject0.position.x != currentX)\r\n\t\t\t\t\tinput.val(objects.GameObject0.position.x);\r\n\t\t\t});\r\n\t\t\tvar tab = FindTabByTitle(\"Test Window\"); //WARNING; when you move window it is created again so you need to recall this one with goldenlayout API\r\n\t\t\tvar stack = FindStackByTitle(\"Test Window\");\r\n\t\t\ttab.closeElement\r\n\t\t\t\t.off('click') //unbind the current click handler\r\n\t\t\t\t.click(function () { //tab close\r\n\t\t\t\t\tif (confirm('Do you want to close tab?')) {\r\n\t\t\t\t\t\ttab.contentItem.remove();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\tstack.header.controlsContainer\r\n\t\t\t\t.find('.lm_close') //get the close icon\r\n\t\t\t\t.off('click') //unbind the current click handler\r\n\t\t\t\t.click(function () {\r\n\t\t\t\t\tif (confirm('Do you want to close stack that contains Test Window?')) {\r\n\t\t\t\t\t\tstack.remove();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t}\r\n\t\teditorLoadComplete.push(function () { //make sure editor is loaded \r\n\t\t\tif ($(\"#dvTestWndw\").length > 0) // if window is open from previous session (Every window state is automatically saved \r\n\t\t\t\tCreateTestWindow();\r\n\t\t\taddMenu(\"Test Window\", function () { //Add to top menu \r\n\t\t\t\tif ($(\"#dvTestWndw\").length > 0)\r\n\t\t\t\t\t$(\"#dvTestWndw\").html(''); //Clear Inside \r\n\t\t\t\tCreateTestWindow();\r\n\t\t\t\tactivateByTitle(\"Test Window\"); //If it is in tab activate tab \r\n\t\t\t}, \"\", undefined, \"btnTestWindow\");\r\n\t\t});"
helptext['New Menu'] = "Creating Menu Items\r\n\tAdding Items to Any Menu\r\n\t\tWhen you are creating a plugin or new functionality sometimes you need to add new menu items. To add new menu item to anywhere(to top menu or any window - you may have already saw this function in @New Editor Window@ \r\n\t\tor @Custom Editor for properties@ ) use \"function addMenu(Label, Function, Parent, Where, Class) \" function\r\n\t\tLabel : This will be label assigned to menu which user will see\r\n\t\tFunction : This function will be executed when menu item clicked\r\n\t\tParent : undefined or jQuery selector of this menu, when this parameter is set this will be a sub menu.\r\n\t\tWhere : jQuery selector of container. When this item is set this item will be added as new button to place that is set with this parameter. If this is left undefined, item will be added to top menu.\r\n\t\tClass : Class string will be added to menu item's button. This is not mandatory but if you want to use button somewhere else it makes easier.\r\n\t\t//Example 1\r\n\t\taddMenu(\"Test Alert\", function () { alert(\"New menu item\");}); // This will add new menu item to top menu\r\n\t\tResult:\r\n\t\t@@TopmenuItem.png@@\r\n\t\t//Example 2\r\n\t\taddMenu(\"Main Menu\", undefined,undefined,undefined,\"btnMenu\");\r\n\t\taddMenu(\"Test Alert\", function () { alert(\"New menu item\");},\".btnMenu\"); // This will add new menu item as sub menu\r\n\t\tResult:\r\n\t\t@@TopmenuItem2.png@@\r\n\t\t//Example 3 This example assumes you enabled physics via box2d\r\n\t\toverrideFunction(this,\"gameHierarchy1\",function(){ //Everytime hierarchy changes window is redrawn using this so you need to overrride default function\r\n\t\taddMenu(\"Create Physics GameObject\", function () { \r\n\t\t\t\tsocketemit(\"addGameObject\",{Physics:{}}); // This will add new gameobject to scene with default physics\r\n\t\t\t}, \"\", \"#gamehierarchy\", \"btnAddHierarchy\"); // This will add new menu item to hierarchy window\r\n\t\t});\r\n\t\tgameHierarchy1(); // We havent call actual function so simply we redraw hierarchy\r\n\t\tResult:\r\n\t\t@@TopmenuItem3.png@@"
helptext['Object Animation'] = "Object Animation and Its window\r\n\tNOTE : To Use Object animation you need to import objectAnimator plugin. If you didnt add during project creation you can import by Top menu -> File -> Import Plugin -> Check objectAnimator -> Click import button\r\n\tWhat is it:\r\n\t\tObject animation is a way to animate objects with changing its attributes over time saving this information and trigger changes at any moment. For example you can have 1 object called \"body\" and it has 6 children \"Head,LeftArm,RightArm,Torso,LeftLeg,RightLeg\" you can add objectAnimator component to body then changing it's children's rotation and position you can create walk idle etc. animations. \r\n\t\tMost of the attributes are animatable so you can create cinematics or cutscenes with your imaginations. Dont forget you can animate your own components if it is responsive to its attributes.\r\n\tUsage:\r\n\t\tSelect gameobject you want to animate. Then Add \"objectAnimator\" component. This will control this gameobject and all of its children.\r\n\t\tplayOnStart : Default animation name that will run as game object loaded if you dont want to autoload animation at start leave empty.\r\n\t\tloopCount: If you set playOnStart animation that animation will be looped as you set this. if you set -1 it will be looped forever.\r\n\t\tAdd New animation Button : Creates new animation, you can set name desired FPS and number of frames here.(Or You can edit after but you cannot edit name)\r\n\t\tAfter you add new animation new buttons will appear;\r\n\t\tEdit \"Name\" Properties : You can change FPS or number of frames after creation\r\n\t\tX: Delete animation\r\n\t\tStart Recording \"Name\" : When you click this button all changes done to selected game object and its children will be recorded to current frame. After you done record object will be resetted to original values. This will also hide buttons on component but more importantly creates new Object Animation Window.\r\n\t\t@@oa1.png@@\r\n\tObject Animation window:\r\n\t\tWhen you create new animation there will be only 2 things on window . Stop recording button which stops recording and save changes to animation. An a slider to set frame.\r\n\t\tTake slider to any frame then start to change any attribute from properties window. This will create new keyframe. And keyframes start to appear. Then take frame slider to different time change same attribute again. If the attribute you are changing is a number empty frames will be auto calculated to create tween. If it is not number only keyframes will hold change information.\r\n\t\tAfter you create animation you can delete keyframes by; first select keyframes that will be deleted by clicking on them then right click one of them select \"Delete Selected\". if you delete all keyframes from any property that property will not be shown on window anymore.\r\n\t\tTo do fine tuning you can move keyframes by selecting frames then right click and click \"Move selected\". This will prompt popup message \"how many frames you want to move\" . As pointed earlier you can select multiple keyframes from multiple attributes from multiple frames all keyframes will move relative to its current frame. So you can enter negative numbers if you want to move backwards.\r\n\t\tAfter everything is done and you create animation click on \"Stop Recording\" to save your work.\r\n\t\t@@oa2.png@@\r\n\tCoding\r\n\t\tAfter you have some object animation you can control this animations from code. \r\n\t\tNOTE : Examples below assumes you have \"testGO\" game object and it has two animations \"idle\" ,\"shoot\"\r\n\t\tPlay: to play an animation you can use playXTimes(\"Animation Name\", [loop count, -1 for infinite], callbackFunction) function on objectAnimator component. \r\n\t\t//Example to play shoot animation then idle forever.\r\n\t\tobjects.testGO.objectAnimator.playXTimes(\"shoot\",1,function(){\r\n\t\t\tobjects.testGO.objectAnimator.playXTimes(\"idle\",-1); //Short version , objects.testGO.objectAnimator.loop(\"idle\");\r\n\t\t});\r\n\t\tGet Current Animation: If you need to get current animation's name you can use playing attribute, If no animation is present it will be undefined.\r\n\t\t//Example\r\n\t\tif(objects.testGO.objectAnimator.playing==\"idle\") //Only shoot during idle\r\n\t\t\tobjects.testGO.objectAnimator.playXTimes(\"shoot\",1);\r\n\t\tGet current frame : When an animation is playing you can get its current frame from currentFrame attribute. \r\n\t\tStop Animation with current frame: If you use stop function it will stop animation immediately \r\n\t\tGo To Frame: If you want to set all attributes to a frame's state you can use gotoFrame(\"Animation name\",[frame number ]) function \r\n\t\t//Example\r\n\t\t objects.testGO.objectAnimator.loop(\"idle\"); //play idle animation\r\n\t\t setTimeout(function(){ //set timeout for test purposes\r\n\t\t\t objects.testGO.objectAnimator.stop(); //stop animation at current frame.\r\n\t\t\t objects.testGO.objectAnimator.gotoFrame(\"idle\",0) // We dont know at which frame animation ended but we want to set first frame.\r\n\t\t },1000);\r\n\t\t\t\r\n\r\n\t\t"
helptext['Painter (overriding default actions)'] = "Adding functionality to game view (Advanced)\r\n\tWhat is default mouse actions?\r\n\t\tBy default h5Engine gameview is where you can position your gameobjects or you can select your gameobjects. If you click any object it will deselect your current selected gameobject and select new gameobject or if you drag your gameobject it will change its position.\r\n\tWhy do i need to change this?\r\n\t\tIf you are making some plugin that has drawing capabilities this default actions will get in your way while drawing. (For more complicated example you can check box2d plugin-> box2dUtil.js (Check mouse actions))\r\n\tHow to do \r\n\t\tlocking default actions actually very simple you can set global variable \"lockedSelection\" true to prevent default actions and false to enable that again.\r\n\n\t\t//This component will draw black dots and serialize that can be seen in actual game\n\t\tgm.Drawer = function () {\n\t\t\tthis.worksInEditor = true; //IMPORTANT you need to set this true \n\t\t\tthis.Editing = false; //This will enable/disable on gameview editing\n\t\t\t$this = this;\n\t\t\tnewObservable($this, \"Editing\", undefined, function (value) { //We will lock/unlock default actions with \"Editing\" checkbox\n\t\t\t\tlockedSelection = value; //If editing we will lock default actions otherwise we will unlock\n\t\t\t});\n\t\t\tthis.points = [[0, 0], [0, 5]]; //Where points will be stored\r\n\t\t\tthis.customDiv = {\r\n\t\t\t\tresetMe: function (container) {\r\n\t\t\t\t\tvar $this = this;\r\n\t\t\t\t\taddMenu(\"Remove All Dots\", function () {\r\n\t\t\t\t\t\t$this.points = [];\n\t\t\t\t\t\tCommitValue($this.gameObject, \"Drawer\", \"points\");\r\n\t\t\t\t\t\t$this.graphics.clear();\n\t\t\t\t\t\t$this.Draw();\r\n\t\t\t\t\t}, \"\", container, \"\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.drawing = false;\r\n\t\t\tthis.private = { drawing: true }; // We dont need this value on properties\r\n\t\t\tthis.serializeObject = { points: true } // We need points on actual gameplay, by default arrays are not serialized\n\t\t}\n\t\tgm.Drawer.prototype.create=function () {\n\t\t\tthis.Editing = false; //Just to be safe.\n\t\t\tthis.graphics = new PIXI.Graphics(); //h5Engine uses PIXI behind scenes you can use any functionality it provides\n\t\t\tthis.gameObject.position.container.addChild(this.graphics);\r\n\t\t\tthis.Draw();\n\t\t}\n\t\tgm.Drawer.prototype.update = function (dt) {\n\t\t\tif (INEDITOR && this.Editing) { //While working in editor and drawing we update on every frame\n\t\t\t\tthis.graphics.clear();\n\t\t\t\tthis.Draw();\n\t\t\t}\n\t\t}\n\t\tgm.Drawer.prototype.Draw = function () {\n\t\t\tfor (var i = 0; i < this.points.length; i++) {\r\n\t\t\t\tvar p = this.points[i];\n\t\t\t\tthis.graphics.lineStyle(4, 0x0, 1);\r\n\t\t\t\tthis.graphics.drawCircle(p[0], p[1] , 2);\r\n\t\t\t\tthis.graphics.lineStyle(0);\r\n\t\t\t}\n\t\t}\n\t\tgm.Drawer.prototype.mouseDown = function (mouse) {\n\t\t\tif (this.Editing && mouse.left) { //While editing left mouse starts draw and adds a dot to array\n\t\t\t\tthis.points.push([mouse.x - this.gameObject.position.x, mouse.y - this.gameObject.position.y]); //Align mouse with gameobject\n\t\t\t\tthis.drawing = true;\n\t\t\t}\n\t\t}\n\t\tgm.Drawer.prototype.mouseMove = function (mouse) {\n\t\t\tif (this.Editing && this.drawing) { //While editing and drawing mouse move adds a dot to array\n\t\t\t\tthis.points.push([mouse.x - this.gameObject.position.x, mouse.y - this.gameObject.position.y]);\n\t\t\t}\n\t\t}\n\t\tgm.Drawer.prototype.mouseUp = function () {\n\t\t\tif (this.Editing) { //While editing mouseup ends drawing and commits points to server to serialize this.\n\t\t\t\tCommitValue(this.gameObject, \"Drawer\", \"points\");\n\t\t\t\tthis.drawing = false;\n\t\t\t}\n\t\t}\n\t\tgm.Drawer.prototype.dispose=function () {\n\t\t\tif (this.graphics) {\r\n\t\t\t\tthis.gameObject.position.container.removeChild(this.graphics); //PIXI safe\r\n\t\t\t\tdelete this.graphics;\r\n\t\t\t}\n\t\t}\n\t\tResult:\n\t\t@@painter.png@@"
helptext['Paper Animation Editor'] = "Paper Animation Window\r\n\t\tYou can access paper animation by, creating new animation from \"New Animation\" button in assets window then double click .anim file. \r\n\t\tTo add new frames double click on any image in assets window. You can add same image indefinetly to change relative length (Animation speed can be changed from gameobject sprite component. More info on sprite component API)\r\n\t\tIn animation window you can delete frames by clicking on \"X\" button or rearrange by dragging frames.\r\n\t\tNOTE: Paper animation is not recommended animation you should use sprite animation where it is suitable. (More info on sprite component)"
helptext['Paperbook animation'] = "Paperbook Animation\r\n\tWhat is it?\r\n\t\tIts a just easy way to do sprite animation for prototyping or if game needs only light animation you can use it, otherwise spritesheets always recommended.\r\n\t\t1: Create new animation file from assets window top menu\r\n\t\t@@paper0.png@@\r\n\t\t2: Double click new asset it will open new window.\r\n\t\t3: Double click images that needs to be added to paperbook, you can add images multiple times.\r\n\t\t4: In gameObject's sprite component select path as new animation (it is automatically saved) , and set FPS\r\n\t\t@@paper1.png@@\r\n\t\tResult: \r\n\t\t@@paperanim.gif@@"
helptext['Particles'] = "Particle System\r\n\t\tTo add particle system, add \"particle\" component to gameobject then configure with your needs.\r\n\t\tmaxLife: Every particle have their own life set with this value when they created.\r\n\t\tminSpeed: Minimum speed of a particle.\r\n\t\tmaxSpeed: Maximum speed of a particle.\r\n\t\tvelocityX : Starting horizantal velocity of particle (can be negative)\r\n\t\tvelocityY : Starting vertical velocity of particle (can be negative)\r\n\t\tvelocityRandomness : velocityX and Y can be varied with random value with this. This way every particle will have different velocity.\r\n\t\tstartSize : Size of a particle hen it is spawned.\r\n\t\tendSize : Estimated size of a particle when its life is over (destroyed)\r\n\t\tminRotation : Every particle rotates with their velocity you can limit it with this.\r\n\t\tmaxRotation : Every particle rotates with their velocity you can limit it with this.\r\n\t\tmaxRotationRandomness : Every particle can have different amount of rotation within random value set by this.\r\n\t\tmaxParticle: MAximum number of particles allowed. When Current particle count hits this number new particles arent spawned until some of the particles destroyed (Through life)\r\n\t\tparticleSpawnSpeed : Number of particles spawned can be set with this.\r\n\t\ttintByLife : Particles can change its color throuhout its life-cycle you can set an array of colors here.\r\n\t\tpath : Particle's image path.\r\n\t\tAnimationSpeed : If particle image is an paperbook animation this value sets its animation speed (Yes particles can be animated.)\r\n\r\n\t\t@@particle.png@@"
helptext['Physics'] = "Physics\r\n\tBox2d or p2js or Miniphysics\r\n\t\th5Engine offers 3 physics engine to choose from by default. Their interfaces are very similliar so you can change physics engine after you created your project. But choosing from start and knowing its capabilities is a big plus.\r\n\t\tp2js is awesome physics engine and i love it, but if you have no idea to what to choose box2d is recommended (More examples on the internet well known etc.) Or if you need very very lightweight physics engine you can choose miniphysics. Its an small engine that we made along the way.\r\n\t\tNOTE : If you need liquid simulation always choose box2d only box2d offers stable liquid physics.\r\n\t\tInformation for documentation : generally apply to p2js aswell but everything is written for box2d.js\r\n\tWeb sites\r\n\t\tThese are the tools behind the scenes makes physics work.Box2d and p2js are main physics engine and decomp is a tool to make concave polygons work for box2d.\r\n\t\t p2.js: @https://schteppe.github.io/p2.js/@\r\n\t\t Liquidfun-Box2d: @https://github.com/flyover/box2d.js@\r\n\t\t Poly decomp.js: @https://github.com/schteppe/poly-decomp.js/@\r\n\r\n\tWorld\r\n\t\tWhen you add physics plugin to your project, Box2dWorld or P2World GameObject will be created automatically for every scene. If you are only using what h5Engine offers (Bodies, shapes constraints simple physics subjects.) you dont need to do anything with these objects. But if you go and inspect box2d or p2js code and add additional functionalities you may hack source code.\r\n\t\tPhysics world is stored in global variable \"world\" outside of h5Engine ecosystem if you ever need to use it.\r\n\t\t//Example\r\n\t\t//world.m_gravity.y=10; //Default is 980\r\n\t\r\n\r\n\r\n"
helptext['Physics Object'] = "Physics Objects\r\n\tInspector\r\n\t\tTo make any object as a physics object so it will obey physics world just add \"Physics\" component. Physics object will syncronize its position and rotation to \"position\" components fields.Other inspector properties are;\r\n\t\tisLiquid : Set object as liquid , more info at @Liquid@\r\n\t\tdebugDraw : If set to true , a shape will be drawn with objects collider shape. \r\n\t\tcolliderType: Can set collider type as box, circle , polygon or as concave. Polygon and concave essentially same but if your polygon is not concave you should select polygon to save some loading time (its not too big i promise but with lots of polygon it may matter)\r\n\t\tWhen box selected -width, height: Box'es width and height you can see red shape visually when you change default box size.\r\n\t\tWhen circle selected - radius : Circle's radius in h5Units. You can see circle visually with new radiuses.\r\n\t\tWhen polygon or Concave selected - Edit Button (At the end) : When you click on \"Edit\" button you can change shape of polygon or concave. you can move points by clicking (selecting) on them then dragging them. or you can click on any point of line to add new points. Finally when you press \"DEL\" button from keyboard selected point will be deleted. When you are happy with the shape press stop button to end shaping.\r\n\t\tdamping,friction,restitution,density : Physics properties for material.\r\n\t\tstatic : Static objects dont move with force or gravity you can toggle this ability with this.\r\n\t\tisSensor : Sensor objects dont interract with other objects except creating events. When you need this behaviour you can toggle this property.\r\n\t\tisBullet : Bullets are very high velocity object that require more calculations.\r\n\t\tfixedRotation : If object's rotation shouldn't be controlled by physics engine check this. (For example main character for platform game.)\r\n\t\tWhen you set your objects properties nothing more is required to make object act as an physics object (It will have body and shape automatically)\r\n\tCoding\r\n\t\tIf user actions/options etc will influence physics object (for example it will move, change places) you need some custom code.\r\n\t\tPrenote : You can access all of inspector values as usual; \r\n\t\t//Example assumes GameObject0 has Physics component\r\n\t\tobjects.GameObject0.Physics.static=true; // Makes object static\r\n\r\n\t\tOther hidden properties are;\r\n\t\tbody : This is where box2d body stored use this if you know box2d API only. Also some h5Engine properties may reset body (for example static property). You can access everything about this physics object fixturelist, shapes etc.\r\n\t\tvelocityX,velocityY : Easy way to add velocity. Object will gain speed based on this.\r\n\t\t//Example 2 assumes GameObject0 has Physics component\r\n\t\tobjects.GameObject0.Physics.velocityY=-1000; //Makes object jump upwards.\r\n\r\n\t\t//Example 3 assumes GameObject0 has Physics component, Also assumes there is GameObject1 as static object and they are touching.\r\n\t\tvar contacts=objects.GameObject0.Physics.body.m_contactList;\n\t\twhile(contacts!=null){\n\t\t\tvar other=undefined;\n\t\t\tif(contacts.contact.m_fixtureA.m_body==objects.GameObject0.Physics.body)\n\t\t\t\tother=contacts.contact.m_fixtureB.m_body;\n\t\t\telse\n\t\t\t\tother =contacts.contact.m_fixtureA.m_body;\n\t\t\tconsole.log(other.gameObject.name.value); //logs GameObject2\n\t\t\tcontacts=contacts.next;\n\t\t}\n\n\tEvents\n\t\tEvery component has 3 predefined events about Physics.Namely beginContact,endContact,impact. This events are triggered by physics engine if only some of the components has these events. \n\t\tUsage: \n\t\tgm.[ComponentName].prototype.beginContact = function (other) { /* things */} : This will be called if only gameobject has both Physics and [ComponentName] component. Everytime contact begins this will be executed where \"other\" is gameObject reference to other gameobject.\n\t\tgm.[ComponentName].prototype.endContact = function (other) { /* things */} : The only difference is this is called when contact ends.\n\t\tgm.[ComponentName].prototype.impact = function (other) { /* things */} : This will be called during impact.\n\n\t\t//Example This component will make object to slide when touches static physics object\n\t\tgm.events = function(){ \n\t\t}\n\t\tgm.events.prototype.beginContact = function (other) { \n\t\t\tconsole.log(other);\n\t\t\tif(other.Physics.static)\n\t\t\t\tthis.gameObject.Physics.velocityX=100;\n\t\t}"
helptext['Plugin Management'] = "Plugin Management\r\n\t\th5Engine offers plugin sysytem to quickly share your codes/assets/functionality to others or saving functionality to reuse in different projects.\r\n\tCreating Plugin\r\n\t\tWhile you work on you current work , some functionalies may be usefull for later use.Note that, plugins stored in different system so plugins cause no overhead to current project. Also if you change any part of plugin other projects wont be affected. To Include new changes you have to reimport.\r\n\t\tYou can save plugin by TOP Menu->Save Plugin this will open new popup window. First information needed to create is Existing plugin name; If you choose \"New\" then you create plugin from scratch. If you choose existing plugin then Plugin name automatically fills and existing assets will be checked. \r\n\t\tPlugin Name: Every plugin have their unique name If you are creating new plugin you need unique name if you are trying to overwrite plugin you will give existing plugin's name.\r\n\t\tIncluded Assets : The plugin functionality will be derived from your current assets. You need to check a group of assets that define some functionality. When you design your project always keep in mind every asset should serve only one purpose so if you need to create plugin you wont need any extra work to seperate functionality.\r\n\t\tWhen you click save, if it is a new plugin it is done you created your first plugin. When you are trying to change existing plugin new popup window will be shown to summarize changes. \r\n\t\t\tThere is 3 groups here, Changes: Assets that will be saved and are different from existing plugin. If it is code file then you can click asset to compare versions.\r\n\t\t\tAdded files : Assets that werent present in previous version and will be added to plugin.\r\n\t\t\tRemoved Files : Assets that were present in previous version and will not be included in final version.\r\n\t\tAfter you check all changes and you are happy with new changes Click \"Overwrite/Save\" to overwrite plugin.\r\n\tImporting Plugin to project.\r\n\t\tWhen you create new project you can choose starting plugins. After you created project you can always add new plugins to project by TOP Menu-> Import Plugin to Project. This will open basic popup that shows existing plugins you need to check plugins that you want to add current project then click on \"Import\" .\r\n\t\tNOTE: If your plugin have assets that are already in project that files will be overwritten without prompt. \r\n\tExporting Plugin \r\n\t\tWhen you made a great plugin that you are proud to share with others or any other reason you can export plugin to file system. TOP Menu->Export Plugin to File creates a file that can be shared with others.\r\n\tImporting Other Plugins to System\r\n\t\tIf you have any plugin in file systemyou can import bu TOP Menu -> Import Plugin From file. Just Select plugin file and change name if you want then import.\r\n\tDeleting Plugins from system\r\n\t\tIf you have too much plugin and want to clean a bit, you can delete any plugin from TOP Menu -> Save Plugin , select plugin you wish to exclude then Click \"Delete Selected Plugin\".\r\n\t\tNOTE: Plugin files arent really deleted from hard drive if you accidentally delete plugin you can reimport from [h5Engine Folder]\\plugins folder."
helptext['Prefab Painter'] = "Prefab Painter Tool\r\n\t\tWhen you double click \"Prefab Painter\" button in Assets window an new Prefab Painter window will be open, You can dock move that window anywhere,\r\n\t\tYou can quickly place prefabs scene with this new tool.\r\n\t\tAll prefabs will be shown in window. Also grid settings can be changed to arrange imaginary grid in scene to place objects in better alignment. Click on any prefab which is shown by its name and image represantation then when you click in game editor window that prefab will be placed nearest grid.\r\n\t\t@@prefab.png@@"
helptext['Prefabs'] = "Prefabs\t\r\n\t\tA prefab in h5Engine term is collection of game objects with one parent and all of its children (It can be single gameobject) that can be initiated whenever needed.\r\n\t\tCreating new prefab is easy; Click on any gameobject on properties window click \"Save Prefab\" button under its name. This will create new asset that consist of selected gameobject and its children. If you are not happy with default name select asset and press f2 key to rename.\r\n\t\tIn editor if you double click on prefab asset in assets window this will add copy of that prefab with same values.\r\n\t\tFrom code you have more control when adding new prefab;\r\n\t\tYou can add prefabs with addPrefab([prefab asset name],[default values or empty]) = [new gameobject name] function\r\n\t\t//Adding prefab with default values, Assumes there is testPrefab.prefab that have its position x=0,y=0 and rotation=0, And has sprite component exists.\r\n\t\taddPrefab(\"testPrefab.prefab\"); //Adds new gameobject to scene\r\n\t\t//using new gameobject\r\n\t\tvar createdGameObject=objects[addPrefab(\"testPrefab.prefab\")[0]]; // Creates new gameobject from testPrefab.prefab and stores gameobject in createdGameObject variable.\r\n\t\tconsole.log(createdGameObject.position.x); // logs 0\r\n\t\tcreatedGameObject.position.x+=10; // And moves object 10 unit in x axis.\r\n\t\t//Creating gameobject with different default values.\r\n\t\tvar createdGameObject=objects[addPrefab(\"testPrefab.prefab\",{\r\n\t\t\tposition:{\r\n\t\t\t\tx:10\r\n\t\t\t},\r\n\t\t\tsprite:{\r\n\t\t\t\tpath:\"test.png\"\r\n\t\t\t}\r\n\t\t})[0]];  //Creates prefab with altered default values, any initiation code uses these variables will take these values. \r\n\t\tconsole.log(createdGameObject.position.x); // logs 10"
helptext['Properties'] = "\tProperties Window\r\n\t\tProperties window shows current attributes of selected game object from editor. You can change gameobject values from here to set loading values or when you are using object animator, you can set that frame's desired value. \r\n\t\tAll of the components added to current gameObject shown here. You can add more components with combobox at the end or remove component by pressing \"X\" on that component's header.\r\n\t\tCustomization\r\n\t\tProperties window dynamically gets all attributes of gameobject and creates input for editing. But you can change default behaviour in different ways while you code your component.\r\n\t\t- Hiding A Variable From Properties Window: if you set private attribute of gameobject (Generally you want to do that while you design your component) you can set some of the properties not visible in properties window.\r\n\t\tUsage : this.private={\"Name of the property that needs to be hide\":true}\r\n\t\t//Code\r\n\t\t//Example 1\r\n\t\t//This component will never show its \"Attribute\" or \"private\" attributes on properties Window\r\n\t\tgm.TestComponent=function(){\r\n\t\t\tthis.Attribute=\"Hide Me\";\r\n\t\t\tthis.private ={Attribute:true}\r\n\t\t}\r\n\t\t//Example 2\r\n\t\t//This component always show \"Toggle\" attribute as checkbox, if you check checkbox it will also show \"Attribute\" attribute, if you toggle off textbox will be hidden.\r\n\t\tgm.TestComponent0=function(){\r\n\t\t\tthis.Toggle=false;\r\n\t\t\tthis.Attribute=\"Hide/Show Me\";\r\n\t\t\tthis.private ={Attribute:true};\t\t\r\n\t\t\tvar $this = this;\r\n\t\t\tif (INEDITOR) //You dont need this in actual game\r\n\t\t\t\tnewObservable(this, \"Toggle\", undefined, function () { //Creates new observable and triggers function when Toggle attribute change\r\n\t\t\t\t\t$this.private.Attribute=!$this.Toggle;\r\n\t\t\t\t\tif(selectedSprite==$this.gameObject) //Only redraw when this gameobject is selected\r\n\t\t\t\t\t\treDrawPanel($this.gameObject);\r\n\t\t\t\t});\r\n\t\t}\r\n\t\t- Set Combobox : You can limit choices that can be set of an attribute by transforming it into combobox easily.\r\n\t\tUsage : this.comboBoxes ={\"Attribute that stores value's Name\" : \"Combox options string array\"}\r\n\t\t\t\tOr : this.comboBoxes ={\"Attribute that stores value's Name\" : \"Combox options text/value object array = {name:'option s text to be shown', value:'when selected this will be set to var' \"}\r\n\t\t//Code\r\n\t\t//Example 1\r\n\t\t//In this example there is two string property in component which is presented by two static combobox\r\n\t\tgm.TestComponent1=function(){\r\n\t\t\tthis.Attribute1=\"\";\r\n\t\t\tthis.Attribute2=\"0\";\r\n\t\t\tthis.comboBoxes ={Attribute1:[\"Choice1\",\"Choice2\"],\r\n\t\t\t\t\t\t\t\tAttribute2:[{text:\"Zero\",value:\"0\"},{text:\"One\",value:\"1\"},{text:\"Two\",value:\"2\"}]\r\n\t\t\t\t\t\t\t\t}\r\n\t\t}\r\n\t\t//Example 2\r\n\t\t//In this example Attribute1 has dynamic combobox which changes its options depending on other variable Word's letters.\r\n\t\tgm.TestComponent2=function(){\r\n\t\t\tthis.Attribute1=\"\";\r\n\t\t\tthis.Word=\"\";\r\n\t\t\tthis.comboBoxes ={};\r\n\t\t\tthis.comboBoxes.Attribute1=[];\r\n\t\t\tvar $this = this;\r\n\t\t\tif (INEDITOR) //You dont need this in actual game\r\n\t\t\t\tnewObservable(this, \"Word\", undefined, function () { //Creates new observable and triggers function when Toggle attribute change\r\n\t\t\t\t\t$this.comboBoxes.Attribute1=[];\r\n\t\t\t\t\t\tfor (var i = 0; i < $this.Word.length; i++) {\r\n\t\t\t\t\t\t\t$this.comboBoxes.Attribute1.push( $this.Word[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tif(selectedSprite==$this.gameObject) //Only redraw when this gameobject is selected\r\n\t\t\t\t\t\treDrawPanel($this.gameObject);\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t- Custom Editor : Sometimes default behaviors of property inputs are not enough, you need more customization. In that case you can create your own property editors by adding HTML and little code.\r\n\t\tMore information can be found at @Custom Editor for properties@"
helptext['Quick tour'] = ""
helptext['Random Tiled (Programatic Background creation)'] = "Random Tiled\r\n\tBackground creation\r\n\t\th5Engine offers a \"different\" way to create tiled maps. You can create tiled maps in seconds with this way that is always consistent (if you made sheet according to this)\r\n\t\tTo create programatic background; select spritesheet image as \"path\" variable in sprite component , check \"randomTiled\" box. This will open new options. Also change desired width and height from position component. \r\n\t\tsheetTileWidth,sheetTileHeight : this is where one piece of tile size is set. This value also sets how many tiles vertically and horizantally will be placed by calculating with position's width and height value (If you need scaling use scaleX and scaleY values)\r\n\t\tsheetTileSpacing : Actual image may have spacing between tiles this is where it is set (in pixels).\r\n\t\tAdd New Random Tile Button: Click this to add new tile rule\r\n\t\t0 Sprite Number: In this rule which tiles will be used placed here. If you want single sprite just enter number. If you need more than one tile placed randomly chosen write them comma seperated.\r\n\t\t0 X Range: start and end of tiles . Think your background as a grid that has 10 tile placed horizantally . 0 represents most left 9 represents most right. if you put 0 5 here it will place 6 tile at the left\r\n\t\t0 Y Range: start and end of tiles . Think your background as a grid that has 10 tile placed vertically . 0 represents most top 9 represents most bottom. if you put 0 2 here it will place 3 tile at the top\r\n\t\t0 Shift Data : A JSON data that moves tileset vertically. \r\n\t\t{\"a[FirstTile]_[LastTileForRule]\":{\"h\":[shift amount in pixels] }\r\n\r\n\t\t@@randomtiled.png@@\r\n"
helptext['Scene Management'] = "Scene Management\r\n\t\th5Engine uses Scenes to organize set of gameobjects with certain values to define a interactable scene. Most of the game engines have simmiliar concept with these namings \"Scene/Level/Room\". To create a game you must have at least 1 scene(Generally you need more). Depending on your design, you can also design cinematics/menu's etc as Scene.\r\n\t\tCreating/ Changing/ Removing Scene: When you create new project you start with new unsaved/unnamed scene. As you make changes to current game design view you actually change your current scene. But to serialize scene for further use you need to save scene. Top Menu -> File -> Save Scene(NEW) prompts new scene's name. Enter a name then save. You will have your first scene. If you click file menu again you will see that menu item changed to your scene name instead of (NEW) this means when you execute that command you will overwrite. (You can use save as to create new scene)\r\n\t\tAll saved scenes are also game assets so you can find your game scene in assets window, and you can Rename/delete move like any other asset.\r\n\t\tScene Order : Top Menu -> File -> Scene Order opens new popup window which you can arrange your default scene order if you have saved scenes before. You can drag-drop items to define order also you can drag-drop between Scene Order and Unused Scenes. Only Scene Order list is essential for game play. There is two feature in this. When you export your game for deployment, It will always start with first scene in this list.  Second part is default scene order to execute for easier scene transition. (Explained below)\r\n\t\t@@sceneorder.png@@\r\n\tScene Transitions;\r\n\t\tLoad Scene : loadScene(SceneName, condition) function is used to load any saved Scene asset. First parameter is assets full name. Second parameter is optional function(newObjectsObject) and used for conditional loading. if you set second parameter as function it will execute before loading scene and will pass very small \"objects\" object that contain every gameobject with default values but before their initialization (create functions). \r\n\t\tNext Scene : nextScene(); function is used to load next scene that is set on \"Scene Order\". \r\n\t\tSave State : saveState(stateName, dontsaveIfstartsWith); This function creates snapshot of current scene with all values stored in all components. Generally you will have lots of static gameobject that doesnt need to be saved or loaded. Also some of the gameobjects that are created automatically. You shouldnt save this objects for better performance and space. \r\n\t\tWith second parameter, if you name this kind of the gameobjects in certain way (For example static objects start with \"static\") you can exclude them during saving state. Also This will not serialize its children too. You can collect this kind of objects under some group you cen exclude them from saving.\r\n\t\t//Example\r\n\t\tsaveState(\"AutoSave\",\"static,GameObject0\"); // This will save all gameobjects current state, except gameobjects that their name starts with \"static\" or \"GameObject0\" and all of their children.\r\n\t\tLoad State : function loadState(stateName, condition) is used to load any saved state (that saved with saveState Function). First parameter is state's name as used in saveState function. Second parameter is optional function(newObjectsObject) and used for conditional loading. if you set second parameter as function it will execute before loading state and will pass very small \"objects\" object that contain every gameobject with state values as same as they are saved.\r\n\t\t//Example assume we have a Director object in every scene, that has LevelProgression component which holds current Scene and Progression, We only want to load saved state if scene is different or progression is more than current progression\r\n\t\tloadState(\"AutoSave\", function (objNew) {\r\n\t\t    return objNew.Director.LevelProgression.currentSceneName != objects.Director.LevelProgression.currentSceneName ||\r\n\t\t        objNew.Director.LevelProgression.progression > objects.Director.LevelProgression.progression;\r\n\t\t});\r\n\t\tDelete State : States may hold large disc space if you dont manage them properly. You can delete unused/unneeded states with deleteState(stateName);\r\n"
helptext['Script Editor'] = "Built-in Script Editor\r\n\t\tWhen you double click any javascript file in Assets window an new javascript window will be open, You can dock move that window anywhere and if you open other javascript this will be closed and new javascript will be open in same place. \r\n\t\tYou can quickly edit javascript files in editor. \r\n\tShort-cuts:\r\n\t\t- CTRL-S : Save current file.\r\n\t\t- CTRL-B : Beautify, arrange indents.\r\n\t\t- CTRL-Z : Undo\r\n\t\t- CTRL-Y : Redo\r\n\r\n\tAdvantages of Built-in Editor.\r\n\t\t- It opens fast works fast have all basic features\r\n\t\t- It is integrated in editor you dont need any 3rd party editor.\r\n\t\t- Javascript based (We all love javascript right? )\r\n\t\t- Easy workflow\r\n\tAdvantages of using Visual studio instead of Built in Editor\r\n\t\t- Full featured automatically integrated one of the best IDE (In my opinion is the best but that debatable)\r\n\t\t- Better code navigation\r\n\t\t- Visual studio debugging\r\n\t\t- Tons tons of features\r\n\t\tEditor:\r\n\t\t@@javascript.png@@"
helptext['Sound'] = "Sound\r\n\tCreating sound\r\n\t\tSound component can be added to any gameobject. Then you can choose sound asset (mp3,wav ogg etc.) from project assets. With default values this will create background music. You can change behavior with options;\r\n\t\tpath : Path of sound asset. This will be played when triggered.\r\n\t\tautoPlay : If checked sound will be played as soon as gameobject created.\r\n\t\tLoop : If checked sound will play indefinetely (or until stopped by code).\r\n\t\tvolume : Volume setting for sound effect/music.\r\n\t\tPlayback Button : playback sound to check it.\r\n\tCoding\r\n\t\tApart from inspector values, you can control sound from code with this properties.(Also you can change properties above.)\r\n\t\tfunction Play() : Play sound with current settings.\r\n\t\tfunction Stop() : Stop playing sound.\r\n\t\tonFinish : Array of functions will be executed after playing sound is over or stopped.\r\n\r\n\t\t//Example assumes you have \"test.mp3\" asset and GameObject0 has Sound component.\r\n\t\tobjects.GameObject0.Sound.path= \"test.mp3\" ; //Set sound file\r\n\t\tobjects.GameObject0.Sound.Loop=false; // We only play it once\r\n\t\tobjects.GameObject0.Sound.volume=50; //with half volume\r\n\t\tobjects.GameObject0.Sound.onFinish.push(function(){\r\n\t\t\tconsole.log(\"test.mp3 played\");\r\n\t\t});\r\n\t\tobjects.GameObject0.Sound.Play(); //This will play \"test.mp3\" once then when it finishes logs \"test.mp3 played\"\r\n"
helptext['Sprite Animation'] = "Sprite Animation (Spritesheet animation)\r\n\tCreating animation\r\n\t\tStart with new sprite , then as path select spritesheet that you had prepared in your favorite paint tool. Then check \"spriteSheet\" checkBox in sprite component. This will open new options;\r\n\t\tsheetTileWidth,sheetTileHeight: Original image will be splitted in smaller pieces by using this values. Think as a grid is put top of your image and every grid is acted as seperate image ( or in this case animation frame) and images will be numbered as 0,1,2... from left to right then top to bottom.\r\n\t\tAnimations; animations are also stored as zero indexed array. You can add infinite amount of animation .\r\n\t\tX animation Name: (X Number) Every animation must have name so you can access from code to play, stop. If animation name is \"default\" then when gameobject created it will start looping that animation.\r\n\t\tX Button (Delete) : There is a X button next to name textbox that removes animation from sprite data.\r\n\t\tX animation FPS: Every animation has its own FPS (Frames Per Second) and set here.\r\n\t\tX animation sequence: This is what transforms static sprite into animated sprite. Enter comma seperated animation sequence to make animation. For example ; 0,1,2,2,1,0,0,0\r\n\t\tAdd New Animation Button : Creates new animation data.\r\n\t\t@@spriteanim0.png@@\r\n\t\tCreates\r\n\t\t@@spriteanim1.gif@@\r\n\tCoding\r\n\t\tAnimation offers these functions/variables ;\r\n\t\tfunction [gameObject].sprite.loopAnim([animation name]) : starts to loop animation immediatly. Animation name is set in editor (\"default\" , \"walk\" are examples above)\r\n\t\t[gameObject].sprite.currentAnim : is object that stores information dont change values if you are not making low level alterations.\r\n\t\t\tname: name of current animation, if nothing is playing it will be undefined.\r\n\t\t\tframe : Frame of current animation.\r\n\t\t\tloop : is animation looping\r\n\t\t\tfunc : When current animation ends this function will be executed.\r\n\t\tfunction [gameObject].sprite.playOnceAnim([animation name],callbackfunction) : Plays named animation once then executes callbackfunction if set (can be empty)\r\n\t\t[gameObject].sprite.sprite : We already mentioned this on standart sprite but you can access pixi sprite through this. So you can code low level stuff or functionality that PIXI offers. \r\n\t\t//Example assumes You have GameObject0 that has settings like above pictures.\r\n\t\tobjects.GameObject0.sprite.playOnceAnim(\"walk\",function(){ //plays walk once then loops default animation\r\n\t\t\tobjects.GameObject0.sprite.loopAnim(\"default\");\r\n\t\t});\r\n\t\tconsole.log(objects.GameObject0.sprite.sprite.playing); // logs true\r\n\t\tconsole.log(objects.GameObject0.sprite.currentAnim.name); // logs \"walk\";\r\n\t\tvar tmr=setTimeout(function(){\r\n\t\tconsole.log(objects.GameObject0.sprite.currentAnim.name); // logs \"default\" after 1 second;\r\n\t\t},1000);"
helptext['Standart Sprite'] = "Standart Sprite Component\r\n\t\tSprite is gameobject's visual representation through images. Newly added gameobjects have their sprite component attached by default( If there is no image selected there is no overhead. So you may leave it even if you dont need )\r\n\t\t:All sprite actions in h5Engine are done with beatiful sprite framework PIXI.js. It is awesome really go check it @http://www.pixijs.com/@\r\n\t\t@@sprite0.png@@\r\n\t\tTo create static sprite just add image asset to solution, Then select image from gameobject's sprite component->path variable in Properties window. This will automatically add image to scene.\r\n\t\tIf you have any paperbook animation (Assets with .anim extension) you may select that animation and animation will run in your game . Adjust desired animation speed through \"AnimationSpeed\" property(Lower is slower).\r\n\tCoding\r\n\t\tYou can access sprites path through [GameObject].sprite.path variable if you set this it will redraw sprite with new image \r\n\t\tAlso if you want to access low level PIXI.js API PIXI sprite is at [GameObject].sprite.sprite (Did i mention that PIXI.js is awesome?)\r\n\t\t//Example 1 assumes you have \"ny.png\" and \"im.png\" assets. this component makes gameobject cycle throug this images on mousedown\r\n\t\tgm.TestComponent5 = function () {    \r\n\t\t}\r\n\t\tgm.TestComponent5.prototype.mouseDownOnMe = function (m) {\r\n\t\t\tif (this.gameObject.sprite.path == \"ny.png\")\r\n\t\t\t\tthis.gameObject.sprite.path = \"im.png\";\r\n\t\t\telse\r\n\t\t\t\tthis.gameObject.sprite.path = \"ny.png\";\r\n\t\t}"
helptext['Text'] = "Text Component\r\n\t\tPIXI.js offers nice text engine that is also available through h5Engine editor or code. (You can use low level PIXI text)\r\n\t\t@@text1.png@@\r\n\t\tAll of the properties can be changed in editor or in code to make realtime changes.\r\n\t\ttext : Text to be drawn\r\n\t\tfontSize : Size of font in h5Units\r\n\t\tfontFamily : Font-family (if it doesnt exits resets to user's system default). If you add ttf font to your assets it will automatically creates usable font . for example if you add \"test.ttf\" to assets you can set fontFamily as \"testttf\"\r\n\t\tfontStyle : can be set italic,oblique or leave empty (Like html fontStyle)\r\n\t\tfontWeight : can be set as any boldness (is this a word?) like html fontWeight property\r\n\t\tfill : Array of color's to set gradient for font's fill value. for single color : ['#ffffff'] , for gradient ['#ffffff','#777799','#555555']\r\n\t\tstroke : Stroke-line color.\r\n\t\tstrokeThickness : stroke-line thickness in h5Units.\r\n\t\twordWrap : if set Word will be wrapped in set h5units width.\r\n\t\twordWrapWidth: Maximum word wrap width, if text exceeds this and word wrap is enabled text will be broken in pieces to fit max size.\r\n\t\tdropShadows : render shadows or not, if this is unchecked below is not needed.\r\n\t\tdropShadowBlur : shadow blur -fuzziness.\r\n\t\tdropShadowAngle : shadow's angle to text's center (imagine imaginary line between text and shadow)\r\n\t\tdropShadowDistance : Shadow's distance to actual text.\r\n\t\t"
helptext['Tutorials'] = "Coming Soon"
helptext['Visual Studio Integration'] = "\tStart / Break Integration\r\n\t\tWhen you create new project in h5Engine It automatically connect with visual studio first time you open project with Visual Studio. However if you wish to break connection for any reason you can change From top menu->settings->connectedVisualStudio option\r\n\tWhat does it mean\r\n\t\tWhen you work your project from editor, If you connected to visual studio everything syncs perfectly two way around. When you change script from editor visual studio updates or when you change script from visual studio editor will also update. Also If you add asset from editor or from file system it will sync with Visual studio automatically.\r\n\t\tWhen you change current scene exportProperties.js file changes to reflect this changes or when you add -remove plugin it syncs.\r\n\tAdvantages to work from visual studio\r\n\t\th5Engine has its own script editor. But Visual studio is amazing editor for javascript. Also You can test scene from editor (More information on Getting Started) and debug with browser's debugger. But in visual studio you can also debug with visual studio's powerful debugger.\r\n\tCan I develop games without even touching visual studio\r\n\t\tWe highly reccomend visual studio it is free (community edition -fully featured) and awesome. But if you dont want you can do everything from editor(See @Script Editor@ for more info) or you can work with your own editor choice (Just open public folder of your project, and run from editor)\r\n\r\n"
helptext['Work Area'] = "\th5Editor\r\n\t\th5Editor is designed to take burden of making games by doing most of time consuming things background automatically. It has WYSIWYG editor to design levels easily, asset system to make game assets more managable also plugin system for code reusability and to make easier to change core features.\r\n\tWork Area\r\n\t\th5Editor consist of windows to manage different systems. These Systems represented by dockable windows. You can Change places, resize and h5Engine will automatically saves state.\r\n\t\tHierarchy : Current Scene's game object hierarcy\r\n\t\tAssets : Project's Assets available to use, or creating new ones.\r\n\t\tGame Design Area: WYSIWYG game level /scene editor. \r\n\t\tProperties : Selected Game Objects's highly customizable component view.\r\n\t\tOther Windows\r\n\t\tScript Editor : Script Asset text/javascript editor. \r\n\t\tPrefab Painter : Easy level creation\r\n\t\tPaper Animation Editor : To create animation with different images (To create spritesheet animation please go to sprite component)\r\n\t\tTile Map Editor : Tile map component use this editor.\r\n\t\tObject Animation : To create animation by changing gameobject and its children you can use object animation (You can change most of the attributes of any component)\r\n\t\tCustom window : You can create Your own windows/editors (Expert)\r\n\t\tDefault h5Engine View:\r\n\t\t@@workArea.png@@"
