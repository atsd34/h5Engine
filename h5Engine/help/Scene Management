Scene Management
		h5Engine uses Scenes to organize set of gameobjects with certain values to define a interactable scene. Most of the game engines have simmiliar concept with these namings "Scene/Level/Room". To create a game you must have at least 1 scene(Generally you need more). Depending on your design, you can also design cinematics/menu's etc as Scene.
		Creating/ Changing/ Removing Scene: When you create new project you start with new unsaved/unnamed scene. As you make changes to current game design view you actually change your current scene. But to serialize scene for further use you need to save scene. Top Menu -> File -> Save Scene(NEW) prompts new scene's name. Enter a name then save. You will have your first scene. If you click file menu again you will see that menu item changed to your scene name instead of (NEW) this means when you execute that command you will overwrite. (You can use save as to create new scene)
		All saved scenes are also game assets so you can find your game scene in assets window, and you can Rename/delete move like any other asset.
		Scene Order : Top Menu -> File -> Scene Order opens new popup window which you can arrange your default scene order if you have saved scenes before. You can drag-drop items to define order also you can drag-drop between Scene Order and Unused Scenes. Only Scene Order list is essential for game play. There is two feature in this. When you export your game for deployment, It will always start with first scene in this list.  Second part is default scene order to execute for easier scene transition. (Explained below)
		@@sceneorder.png@@
	Scene Transitions;
		Load Scene : loadScene(SceneName, condition) function is used to load any saved Scene asset. First parameter is assets full name. Second parameter is optional function(newObjectsObject) and used for conditional loading. if you set second parameter as function it will execute before loading scene and will pass very small "objects" object that contain every gameobject with default values but before their initialization (create functions). 
		Next Scene : nextScene(); function is used to load next scene that is set on "Scene Order". 
		Save State : saveState(stateName, dontsaveIfstartsWith); This function creates snapshot of current scene with all values stored in all components. Generally you will have lots of static gameobject that doesnt need to be saved or loaded. Also some of the gameobjects that are created automatically. You shouldnt save this objects for better performance and space. 
		With second parameter, if you name this kind of the gameobjects in certain way (For example static objects start with "static") you can exclude them during saving state. Also This will not serialize its children too. You can collect this kind of objects under some group you cen exclude them from saving.
		//Example
		saveState("AutoSave","static,GameObject0"); // This will save all gameobjects current state, except gameobjects that their name starts with "static" or "GameObject0" and all of their children.
		Load State : function loadState(stateName, condition) is used to load any saved state (that saved with saveState Function). First parameter is state's name as used in saveState function. Second parameter is optional function(newObjectsObject) and used for conditional loading. if you set second parameter as function it will execute before loading state and will pass very small "objects" object that contain every gameobject with state values as same as they are saved.
		//Example assume we have a Director object in every scene, that has LevelProgression component which holds current Scene and Progression, We only want to load saved state if scene is different or progression is more than current progression
		loadState("AutoSave", function (objNew) {
		    return objNew.Director.LevelProgression.currentSceneName != objects.Director.LevelProgression.currentSceneName ||
		        objNew.Director.LevelProgression.progression > objects.Director.LevelProgression.progression;
		});
		Delete State : States may hold large disc space if you dont manage them properly. You can delete unused/unneeded states with deleteState(stateName);
